
Motor_Control_and_Timing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000048  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000014b  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000c2  00000000  00000000  00000303  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000018e  00000000  00000000  000003c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000058  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000182  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000028  00000000  00000000  0000072e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
//Use a 12 MHz Clk!!

int main(void)
{
	//Activate motor logic output
	DDRC |= (1<<DDC0);
  80:	38 9a       	sbi	0x07, 0	; 7
	
	//Power management
	PRR |= (1<<PRTWI) | (1<<PRUSART0) | (1<<PRSPI) | (1<<PRTIM1) | (1<<PRADC);
  82:	e4 e6       	ldi	r30, 0x64	; 100
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	80 81       	ld	r24, Z
  88:	8f 68       	ori	r24, 0x8F	; 143
  8a:	80 83       	st	Z, r24
	
	//Activate all of portB as an output
	DDRB |= 0xFF;
  8c:	84 b1       	in	r24, 0x04	; 4
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	84 b9       	out	0x04, r24	; 4
	
	//PWM initialization
	PWM_TIM0_init();
  92:	0e 94 4e 00 	call	0x9c	; 0x9c <PWM_TIM0_init>
	PWM_TIM2_init();
  96:	0e 94 5e 00 	call	0xbc	; 0xbc <PWM_TIM2_init>
  9a:	ff cf       	rjmp	.-2      	; 0x9a <main+0x1a>

0000009c <PWM_TIM0_init>:

#include <avr/io.h>

void PWM_TIM0_init(void)
{
	DDRD |= (1<<DDD5) | (1<<DDD6);
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	80 66       	ori	r24, 0x60	; 96
  a0:	8a b9       	out	0x0a, r24	; 10
	OCR0A = 0x7F;
  a2:	8f e7       	ldi	r24, 0x7F	; 127
  a4:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0x7F;
  a6:	88 bd       	out	0x28, r24	; 40
	TCCR0B |= (1<<CS00); //No prescaler for 46,875 Hz input
  a8:	85 b5       	in	r24, 0x25	; 37
  aa:	81 60       	ori	r24, 0x01	; 1
  ac:	85 bd       	out	0x25, r24	; 37
	TCCR0A |= (1<<WGM01) | (1<<WGM00); //Fast PWM
  ae:	84 b5       	in	r24, 0x24	; 36
  b0:	83 60       	ori	r24, 0x03	; 3
  b2:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<COM0A1) | (1<<COM0B1) | (1<<COM0B0); //Set OC0A in non-inverting mode and OC0B in inverting mode for CLK and CLK_Bar
  b4:	84 b5       	in	r24, 0x24	; 36
  b6:	80 6b       	ori	r24, 0xB0	; 176
  b8:	84 bd       	out	0x24, r24	; 36
  ba:	08 95       	ret

000000bc <PWM_TIM2_init>:
}

void PWM_TIM2_init(void)
{
	DDRD |= (1<<DDD5) | (1<<DDD6);
  bc:	8a b1       	in	r24, 0x0a	; 10
  be:	80 66       	ori	r24, 0x60	; 96
  c0:	8a b9       	out	0x0a, r24	; 10
	OCR2A = 0x7F;
  c2:	8f e7       	ldi	r24, 0x7F	; 127
  c4:	80 93 b3 00 	sts	0x00B3, r24
	OCR2B = 0x7F;
  c8:	80 93 b4 00 	sts	0x00B4, r24
	TCCR2B |= (1<<CS00); //No prescaler for 46,875 Hz input
  cc:	e1 eb       	ldi	r30, 0xB1	; 177
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	80 83       	st	Z, r24
	TCCR2A |= (1<<WGM01) | (1<<WGM00); //Fast PWM
  d6:	e0 eb       	ldi	r30, 0xB0	; 176
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	83 60       	ori	r24, 0x03	; 3
  de:	80 83       	st	Z, r24
	TCCR2A |= (1<<COM2A1) | (1<<COM2B1) | (1<<COM2B0); //Set OC0A in non-inverting mode and OC0B in inverting mode for CLK and CLK_Bar
  e0:	80 81       	ld	r24, Z
  e2:	80 6b       	ori	r24, 0xB0	; 176
  e4:	80 83       	st	Z, r24
  e6:	08 95       	ret

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>
